"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MapworksUserRole = exports.MapworksUserType = exports.MapworksAccess = exports.fromEvent = exports.MapworksTooltipViewMode = exports.MapworksFeatureEventType = exports.MapworksFeatureType = void 0;
const rxjs_1 = require("rxjs");
///
var MapworksFeatureType;
(function (MapworksFeatureType) {
    ///
    MapworksFeatureType[MapworksFeatureType["UNKNOWN"] = 0] = "UNKNOWN";
    /// Point
    MapworksFeatureType[MapworksFeatureType["POINT"] = 1] = "POINT";
    /// Polyline
    MapworksFeatureType[MapworksFeatureType["POLYLINE"] = 2] = "POLYLINE";
    /// Text
    MapworksFeatureType[MapworksFeatureType["TEXT"] = 3] = "TEXT";
    /// Circle
    MapworksFeatureType[MapworksFeatureType["CIRCLE"] = 4] = "CIRCLE";
    /// Polygon
    MapworksFeatureType[MapworksFeatureType["POLYGON"] = 5] = "POLYGON";
    /// Rectangle
    MapworksFeatureType[MapworksFeatureType["RECTANGLE"] = 6] = "RECTANGLE";
    /// Multi geometry feature
    MapworksFeatureType[MapworksFeatureType["MULTI"] = 7] = "MULTI";
    /// Image
    MapworksFeatureType[MapworksFeatureType["IMAGE"] = 8] = "IMAGE";
    /// Annotation
    MapworksFeatureType[MapworksFeatureType["ANNOTATION"] = 16] = "ANNOTATION";
})(MapworksFeatureType = exports.MapworksFeatureType || (exports.MapworksFeatureType = {}));
///
var MapworksFeatureEventType;
(function (MapworksFeatureEventType) {
    /**
     * An event triggered by mouse over a feature.
     */
    MapworksFeatureEventType[MapworksFeatureEventType["MOUSEOVER"] = 0] = "MOUSEOVER";
    /**
     * A mouse click event on the map or feature.
     */
    MapworksFeatureEventType[MapworksFeatureEventType["MOUSECLICK"] = 1] = "MOUSECLICK";
    /**
     * A right click event on the map or feature.
     */
    MapworksFeatureEventType[MapworksFeatureEventType["MOUSECLICK_RIGHT"] = 2] = "MOUSECLICK_RIGHT";
    /**
     * A 'mouse press' or 'touch-start' event.
     */
    MapworksFeatureEventType[MapworksFeatureEventType["MOUSEDOWN"] = 3] = "MOUSEDOWN";
    /**
     * A tooltip event when the mouse position is at a position over period of
     * time. This is used to display the tooltip for a feature.
     */
    MapworksFeatureEventType[MapworksFeatureEventType["TOOLTIP"] = 4] = "TOOLTIP";
})(MapworksFeatureEventType = exports.MapworksFeatureEventType || (exports.MapworksFeatureEventType = {}));
;
/**
 * The TooltipView render mode.
 */
var MapworksTooltipViewMode;
(function (MapworksTooltipViewMode) {
    /** Render tooltip view as stand alone view */
    MapworksTooltipViewMode["VIEW"] = "view";
    /** Render tooltip view as part of composite view */
    MapworksTooltipViewMode["CHILD_VIEW"] = "childView";
})(MapworksTooltipViewMode = exports.MapworksTooltipViewMode || (exports.MapworksTooltipViewMode = {}));
;
/// Helper for the RXJS `fromEvent()` function which recognised MapworksMap events
function fromEvent(target, eventName) {
    return (0, rxjs_1.fromEvent)(target, eventName);
}
exports.fromEvent = fromEvent;
var MapworksAccess;
(function (MapworksAccess) {
    /** Start with Anonymous map access and do not provide option to sign in */
    MapworksAccess["Anonymous"] = "anonymous-only";
    /** Start with Anonymous map access AND allow the option to sign in */
    MapworksAccess["AnonymousOrRegistered"] = "anonymous-registered";
    /** Require users to sign in with a registered account only */
    MapworksAccess["RegisteredOnly"] = "registered-only";
})(MapworksAccess = exports.MapworksAccess || (exports.MapworksAccess = {}));
/**
 * Mapworks user types.
 * @see https://krondor.amristar.com/bitbucket/projects/PPM/repos/mapworks-management-console/browse/src/app/api/models/system-user-type.ts#9
 * @see https://krondor.amristar.com/bitbucket/projects/PPM/repos/org-directory/browse/src/entity/types.ts
 */
var MapworksUserType;
(function (MapworksUserType) {
    MapworksUserType["Org"] = "org_user";
    MapworksUserType["Standalone"] = "standalone_user";
})(MapworksUserType = exports.MapworksUserType || (exports.MapworksUserType = {}));
/**
 * Mapworks user roles.
 * @see https://krondor.amristar.com/bitbucket/projects/PPM/repos/mapworks-management-console/browse/src/app/api/models/standalone-user-role.ts
 * @see https://krondor.amristar.com/bitbucket/projects/PPM/repos/mapworks-management-console/browse/src/app/api/models/org-user-role.ts
 * @see https://krondor.amristar.com/bitbucket/projects/PPM/repos/org-directory/browse/src/entity/types.ts
 */
var MapworksUserRole;
(function (MapworksUserRole) {
    MapworksUserRole["AllUsers"] = "all_users";
    MapworksUserRole["Anonymous"] = "anonymous";
    MapworksUserRole["AppUser"] = "app_user";
    MapworksUserRole["FreeUser"] = "free_user";
    MapworksUserRole["MapDesigner"] = "map_designer";
    MapworksUserRole["MapDesignerIndividual"] = "map_designer_individual";
    MapworksUserRole["OrgAdmin"] = "org_admin";
    MapworksUserRole["OrgSubscriber"] = "org_subscriber";
    MapworksUserRole["SystemAdmin"] = "system_admin";
})(MapworksUserRole = exports.MapworksUserRole || (exports.MapworksUserRole = {}));
//# sourceMappingURL=data:application/json;base64,